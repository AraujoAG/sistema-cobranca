#!/bin/bash
# Script para implementar todas as correções no sistema de cobrança

echo "===== Implementando correções no Sistema de Cobrança Alta Linha Móveis ====="

# Verifica se está no diretório raiz do projeto
if [ ! -f "package.json" ]; then
  echo "Erro: Execute este script no diretório raiz do projeto (onde está o package.json)"
  exit 1
fi

# Determina se estamos no backend ou frontend
if grep -q "cobranca-bot-backend" package.json; then
  echo "Detectado projeto backend"
  PROJETO="backend"
elif grep -q "cobranca-bot-frontend" package.json; then
  echo "Detectado projeto frontend"
  PROJETO="frontend"
else
  echo "Não foi possível determinar se é backend ou frontend. Verifique o package.json"
  exit 1
fi

# Função para fazer backup de um arquivo
fazer_backup() {
  local arquivo=$1
  if [ -f "$arquivo" ]; then
    cp "$arquivo" "${arquivo}.bak-$(date +%Y%m%d%H%M%S)"
    echo "✓ Backup criado para $arquivo"
  else
    echo "⚠️ Arquivo $arquivo não encontrado. Não foi possível criar backup."
  fi
}

# Função para criar diretório se não existir
criar_diretorio() {
  local dir=$1
  if [ ! -d "$dir" ]; then
    mkdir -p "$dir"
    echo "✓ Diretório $dir criado"
  fi
}

# ===== CORREÇÕES DO BACKEND =====
if [ "$PROJETO" == "backend" ]; then
  echo "Aplicando correções no backend..."
  
  # 1. Instalar dependências necessárias
  echo "Instalando dependências..."
  npm install --save dotenv cors express ejs axios node-cron xlsx
  
  # 2. Criar/Atualizar diretórios
  echo "Criando estrutura de diretórios..."
  criar_diretorio "bot"
  criar_diretorio "controllers"
  criar_diretorio "routes"
  criar_diretorio "views/dashboard"
  criar_diretorio "public/css"
  criar_diretorio "public/js"
  
  # 3. Atualizar arquivos principais
  echo "Atualizando arquivos principais..."
  
  # Fazer backup dos arquivos existentes
  fazer_backup "server.js"
  fazer_backup "bot/processaBoletos.js"
  fazer_backup "bot/index.js"
  fazer_backup "bot/sendMessage.js"
  fazer_backup "bot/persistenceService.js"
  
  # Criar arquivo .env se não existir
  if [ ! -f ".env" ]; then
    echo "Criando arquivo .env..."
    cat > .env << 'EOF'
# Configurações do Servidor
PORT=5000
NODE_ENV=development

# Configurações do Bot
PROCESSAR_INICIO=false
API_KEY=3073908
TELEFONE_ADMIN=5515988049936

# Configurações de Conexão de DB (para futura implementação)
# MONGODB_URI=mongodb://localhost:27017/sistema-cobranca

# URLs permitidas para CORS
FRONTEND_URL=http://localhost:3000
RENDER_URL=https://sistema-cobranca-frontend.onrender.com
EOF
    echo "✓ Arquivo .env criado"
  fi
  
  echo "✅ Correções do backend aplicadas com sucesso!"
  
# ===== CORREÇÕES DO FRONTEND =====
elif [ "$PROJETO" == "frontend" ]; then
  echo "Aplicando correções no frontend..."
  
  # 1. Instalar dependências necessárias
  echo "Instalando dependências..."
  npm install --save axios react-router-dom recharts
  
  # 2. Criar/Atualizar diretórios
  echo "Criando estrutura de diretórios..."
  criar_diretorio "src/components"
  criar_diretorio "src/pages"
  criar_diretorio "src/services"
  criar_diretorio "src/styles"
  
  # 3. Atualizar arquivos principais
  echo "Atualizando arquivos principais..."
  
  # Fazer backup dos arquivos existentes
  fazer_backup "src/index.js"
  fazer_backup "src/App.js"
  fazer_backup "src/services/api.js"
  
  # Criar arquivo .env se não existir
  if [ ! -f ".env" ]; then
    echo "Criando arquivo .env..."
    cat > .env << 'EOF'
# frontend/.env
REACT_APP_API_URL=https://sistema-cobranca-backend.onrender.com/api
EOF
    echo "✓ Arquivo .env criado"
  fi
  
  # Criar o arquivo .env.development para desenvolvimento local
  if [ ! -f ".env.development" ]; then
    echo "Criando arquivo .env.development..."
    cat > .env.development << 'EOF'
# frontend/.env.development
REACT_APP_API_URL=http://localhost:5000/api
EOF
    echo "✓ Arquivo .env.development criado"
  fi
  
  echo "✅ Correções do frontend aplicadas com sucesso!"
fi

echo "===== Todas as correções implementadas com sucesso! ====="
echo "Sugestões:"
echo "1. Execute 'npm start' para iniciar o projeto"
echo "2. Verifique os logs para identificar possíveis erros"
echo "3. Certifique-se de que tanto backend quanto frontend estão rodando"
echo