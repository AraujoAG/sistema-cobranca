// backend/config/db.js
const { Pool } = require('pg');
require('dotenv').config(); // Certifique-se de que dotenv est√° configurado em server.js ou aqui

// A Connection String do Render j√° inclui todas as informa√ß√µes.
// Certifique-se de ter uma vari√°vel de ambiente DATABASE_URL no Render
// com o valor da "Internal Connection String" fornecida pelo Render.
const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  console.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
  console.error("ERRO FATAL: Vari√°vel de ambiente DATABASE_URL n√£o definida.");
  console.error("Configure-a no Render com a Internal Connection String do seu PostgreSQL.");
  console.error("A aplica√ß√£o n√£o funcionar√° corretamente sem o banco de dados.");
  console.error("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
  // Em um ambiente de produ√ß√£o real, voc√™ poderia fazer process.exit(1) aqui,
  // mas para permitir que o Render tente iniciar (e mostrar logs), vamos apenas logar.
}

const pool = new Pool({
  connectionString: connectionString,
  // Se estiver usando o PostgreSQL do Render e conectando de um servi√ßo do Render na mesma regi√£o,
  // o SSL geralmente √© tratado. Para conex√µes externas ou outros provedores, pode ser necess√°rio:
  // ssl: {
  //   rejectUnauthorized: false // Apenas se o provedor exigir e voc√™ entender as implica√ß√µes
  // }
});

pool.on('connect', () => {
  console.log('üîó Conectado ao banco de dados PostgreSQL!');
});

pool.on('error', (err) => {
  console.error('‚ùå Erro inesperado na conex√£o com o banco de dados:', err);
  // process.exit(-1); // Em produ√ß√£o, considere encerrar se o pool de conex√µes falhar catastroficamente
});

module.exports = {
  query: (text, params) => pool.query(text, params),
  getClient: () => pool.connect(), // Para transa√ß√µes, se necess√°rio
};