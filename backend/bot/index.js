const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
const processaBoletos = require('./processaBoletos');
const { initializeWhatsApp } = require('./sendMessage');
const persistenceService = require('./persistenceService');

// Vari√°veis de configura√ß√£o
const arquivoBoletos = path.join(__dirname, 'boletos.xlsx');

// Fun√ß√£o para verificar se o arquivo de boletos existe
function verificarArquivo() {
  console.log('Verificando arquivo de boletos...');
  if (!fs.existsSync(arquivoBoletos)) {
    console.error('‚ùå Arquivo de boletos n√£o encontrado!');
    
    try {
      // Cria um arquivo padr√£o se n√£o existir
      console.log('Criando arquivo de boletos padr√£o...');
      const xlsx = require('xlsx');
      const workbook = xlsx.utils.book_new();
      const worksheet = xlsx.utils.aoa_to_sheet([
        ['ID', 'Nome', 'Telefone', 'Vencimento', 'Valor', 'Status']
      ]);
      xlsx.utils.book_append_sheet(workbook, worksheet, 'Boletos');
      xlsx.writeFile(workbook, arquivoBoletos);
      console.log('‚úÖ Arquivo de boletos criado com sucesso.');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao criar arquivo de boletos:', error);
      return false;
    }
  }
  console.log('‚úÖ Arquivo de boletos encontrado.');
  return true;
}

// Fun√ß√£o para agendar o envio de mensagens
function agendarEnvioDeMensagem() {
  console.log('üìÖ Agendamento di√°rio configurado para 8h da manh√£...');
  
  // Corre√ß√£o na express√£o cron para executar √†s 8h da manh√£
  // O formato √©: segundos(0-59) minutos(0-59) horas(0-23) dia(1-31) m√™s(1-12) dia-semana(0-6)
  try {
    cron.schedule('0 0 8 * * *', async () => {
      console.log('‚ñ∂Ô∏è Execu√ß√£o di√°ria iniciada √†s 8h...');
      if (verificarArquivo()) {
        await processaBoletos();
      }
    });
    console.log('‚úÖ Agendamento para 8h configurado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao configurar agendamento para 8h:', error);
  }
  
  // Agendamento para gerar relat√≥rio no final do dia (18h)
  try {
    cron.schedule('0 0 18 * * *', () => {
      console.log('üìä Gerando relat√≥rio di√°rio √†s 18h...');
      const stats = persistenceService.obterEstatisticas();
      console.log(`
==== RELAT√ìRIO DI√ÅRIO ====
Data: ${new Date().toLocaleDateString()}
Mensagens enviadas hoje: ${stats.enviosHoje}
Total hist√≥rico: ${stats.totalEnviadas}
Status: ${JSON.stringify(stats.statusContagem)}
==========================
      `);
    });
    console.log('‚úÖ Agendamento para relat√≥rio √†s 18h configurado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao configurar agendamento para relat√≥rio:', error);
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    console.log('üöÄ Iniciando Bot de Cobran√ßa...');
    
    // Inicializa o servi√ßo de persist√™ncia
    persistenceService.initializeHistoricoFile();
    console.log('‚úÖ Servi√ßo de persist√™ncia inicializado.');
    
    // Inicializa o cliente WhatsApp
    await initializeWhatsApp();
    console.log('‚úÖ Cliente WhatsApp inicializado.');
    
    // Verifica se o arquivo existe antes de processar
    if (verificarArquivo()) {
      // Configura√ß√£o para n√£o processar automaticamente no in√≠cio
      // Apenas se a vari√°vel de ambiente estiver configurada
      if (process.env.PROCESSAR_INICIO === 'true') {
        console.log('‚öôÔ∏è Processamento inicial configurado, executando...');
        await processaBoletos();
      } else {
        console.log('‚öôÔ∏è Processamento inicial desativado, aguardando agendamento ou acionamento manual.');
      }
    }
    
    // Configura o agendamento di√°rio
    agendarEnvioDeMensagem();
    
    console.log('‚úÖ Bot de cobran√ßa inicializado e pronto para uso!');
  } catch (error) {
    console.error('‚ùå Erro na execu√ß√£o principal:', error);
  }
}

// Inicia o programa
main();