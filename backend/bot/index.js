// backend/bot/index.js
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');
const processaBoletos = require('./processaBoletos');
const { initializeWhatsApp } = require('./sendMessage'); // Usaremos a vers√£o adaptada
const persistenceService = require('./persistenceService');

const arquivoBoletosPath = path.join(__dirname, 'boletos.xlsx');

// ATEN√á√ÉO: Esta fun√ß√£o que verifica e CRIA 'boletos.xlsx' √© problem√°tica
// para persist√™ncia de dados no Render. O arquivo ser√° perdido.
// Idealmente, a estrutura de dados (tabela/cole√ß√£o) seria criada no banco de dados.
function verificarECriarArquivoBoletosModelo() {
  console.log(`Verificando arquivo de boletos em: ${arquivoBoletosPath}`);
  if (!fs.existsSync(arquivoBoletosPath)) {
    console.warn('‚ö†Ô∏è Arquivo de boletos n√£o encontrado!');
    try {
      console.log('Tentando criar arquivo de boletos modelo (ser√° ef√™mero no Render)...');
      const xlsx = require('xlsx'); // S√≥ carrega se necess√°rio
      const workbook = xlsx.utils.book_new();
      // Cabe√ßalhos esperados
      const worksheetData = [['ID', 'Nome', 'Telefone', 'Vencimento', 'Valor', 'Status']];
      const worksheet = xlsx.utils.aoa_to_sheet(worksheetData);
      xlsx.utils.book_append_sheet(workbook, worksheet, 'Boletos');
      xlsx.writeFile(workbook, arquivoBoletosPath);
      console.log('‚úÖ Arquivo de boletos modelo criado com sucesso.');
      return true; // Arquivo modelo criado
    } catch (error) {
      console.error('‚ùå Erro cr√≠tico ao tentar criar arquivo de boletos modelo:', error);
      return false; // Falha ao criar
    }
  }
  console.log('‚úÖ Arquivo de boletos (ou modelo) encontrado.');
  return true; // Arquivo j√° existe
}

function agendarTarefas() {
  console.log('üìÖ Configurando agendamentos do bot...');

  // Agendamento para processar boletos diariamente √†s 8h da manh√£
  // Formato: 'segundo minuto hora diaDoM√™s m√™s diaDaSemana'
  //          '* * * * * *' (executa a cada segundo - N√ÉO USE EM PRODU√á√ÉO)
  //          '0 0 8 * * *' (executa todo dia √†s 08:00:00)
  const horarioProcessamento = process.env.CRON_HORARIO_PROCESSAMENTO || '0 0 8 * * *';
  console.log(`Agendado processamento de boletos para: ${horarioProcessamento}`);
  if (cron.validate(horarioProcessamento)) {
    cron.schedule(horarioProcessamento, async () => {
      console.log(`‚è∞ CRON: Execu√ß√£o di√°ria de processaBoletos iniciada √†s ${new Date().toLocaleTimeString()}`);
      if (verificarECriarArquivoBoletosModelo()) { // Garante que o arquivo (modelo) exista
        await processaBoletos();
      } else {
        console.error("CRON: N√£o foi poss√≠vel verificar/criar o arquivo de boletos modelo. Processamento abortado.");
      }
    }, {
      timezone: "America/Sao_Paulo" // Defina seu fuso hor√°rio
    });
    console.log('‚úÖ Agendamento de processamento de boletos configurado.');
  } else {
    console.error(`‚ùå Express√£o cron inv√°lida para processamento: ${horarioProcessamento}`);
  }


  // Agendamento para gerar relat√≥rio no final do dia (ex: 18h)
  const horarioRelatorio = process.env.CRON_HORARIO_RELATORIO || '0 0 18 * * *';
  console.log(`Agendado relat√≥rio di√°rio para: ${horarioRelatorio}`);
  if (cron.validate(horarioRelatorio)) {
    cron.schedule(horarioRelatorio, () => {
      console.log(`üìä CRON: Gerando relat√≥rio di√°rio √†s ${new Date().toLocaleTimeString()}`);
      const stats = persistenceService.obterEstatisticas(); // Usa o hist√≥rico (que tamb√©m √© problem√°tico no Render)
      console.log(`
      ==== RELAT√ìRIO DI√ÅRIO DE COBRAN√áAS ====
      Data: ${new Date().toLocaleDateString('pt-BR')}
      Total de mensagens enviadas com sucesso (hist√≥rico): ${stats.totalEnviadasComSucesso}
      Total de falhas registradas (hist√≥rico): ${stats.totalFalhas}
      Envios com sucesso hoje: ${stats.enviosHojeComSucesso}
      Falhas hoje: ${stats.falhasHoje}
      √öltima execu√ß√£o de processamento: ${stats.ultimoEnvio ? new Date(stats.ultimoEnvio).toLocaleString('pt-BR') : 'Nenhuma'}
      Contagem por status no hist√≥rico: ${JSON.stringify(stats.statusContagem)}
      =====================================
      `);
    }, {
      timezone: "America/Sao_Paulo" // Defina seu fuso hor√°rio
    });
    console.log('‚úÖ Agendamento de relat√≥rio di√°rio configurado.');
  } else {
    console.error(`‚ùå Express√£o cron inv√°lida para relat√≥rio: ${horarioRelatorio}`);
  }
}

async function main() {
  console.log('üöÄ Iniciando Bot de Cobran√ßa Alta Linha M√≥veis...');

  // Inicializa o servi√ßo de persist√™ncia (cria o arquivo JSON se n√£o existir)
  // Lembre-se: no Render, este arquivo ser√° ef√™mero.
  persistenceService.initializeHistoricoFile();
  console.log('‚úÖ Servi√ßo de persist√™ncia (arquivo JSON local) inicializado.');

  // "Inicializa" o WhatsApp (para CallMeBot, apenas verifica a API Key)
  const whatsappPronto = await initializeWhatsApp();
  if (whatsappPronto) {
    console.log('‚úÖ Simula√ß√£o de inicializa√ß√£o do WhatsApp (CallMeBot API) conclu√≠da.');
  } else {
    console.error('‚ùå Falha na simula√ß√£o de inicializa√ß√£o do WhatsApp (CallMeBot API). Verifique a API Key.');
    // Considerar se o bot deve prosseguir ou parar aqui
  }

  // Verifica o arquivo de boletos (cria um modelo se n√£o existir)
  // Lembre-se: no Render, este arquivo ser√° ef√™mero.
  verificarECriarArquivoBoletosModelo();

  // Processar boletos no in√≠cio (opcional, controlado por vari√°vel de ambiente)
  if (process.env.PROCESSAR_BOLETOS_NO_INICIO === 'true') {
    console.log('‚öôÔ∏è PROCESSAR_BOLETOS_NO_INICIO est√° ativo. Processando boletos agora...');
    await processaBoletos();
  } else {
    console.log('‚ÑπÔ∏è Processamento de boletos no in√≠cio desativado. Aguardando agendamento ou acionamento manual.');
  }

  // Configura os agendamentos (cron jobs)
  agendarTarefas();

  console.log('‚úÖ Bot de cobran√ßa principal inicializado e tarefas agendadas.');
  console.log('üí° Lembre-se: A persist√™ncia de dados via arquivos locais (Excel, JSON) n√£o √© adequada para o Render.com e resultar√° em perda de dados. Migre para um banco de dados.');
}

// Para ser chamado pelo server.js
module.exports = { main };

// Se voc√™ quisesse rodar este arquivo diretamente (ex: node backend/bot/index.js), descomente:
// main().catch(error => {
//   console.error("‚ùå Erro fatal na execu√ß√£o principal do bot:", error);
// });